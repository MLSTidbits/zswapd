#!/bin/env bash

# Simple-ZRAM is a simple script to create and enable zram swap devices
# Copyright (C) 2024  Michael Schaecher <michaelleeschaecher@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Test if we are root
function verifyRoot () { test "$(id -u)" -eq 0 || { echo "This script must be run as root" ; exit 1 ; } ;}

# Log messages to syslog
function sysLog () { logger -t "${_appName}" "${@}"; }

function startSwap () {

        # Does a zram device already exist?
        ! zramctl -n | grep -q '/dev/zram' || {
            sysLog "ZRAM device already exists, stopping it first" ; exit 0
        }

        # Validate the compression algorithm is supported.
        case "${_swapAlgorithm}" in
            lzo|zstd|lz4    ) ;;
            *               )
                sysLog "Unsupported compression algorithm: ${_swapAlgorithm}"
                echo "Unsupported compression algorithm: ${_swapAlgorithm}" ; exit 1
            ;;
        esac

        # Make sure that the required amount of RAM is available (32Gb minimum)
        test "${_totalRAM}" -gt "33554432" || {
            sysLog "$(( _totalRAM / 1024000 ))GB of RAM is available, but at least 32GB is required!"
            echo "${_appName} requires at least 32GB of RAM" ; exit 1
        }

        test "${_availableRAM}" -gt "50" || {
            sysLog "${_availableRAM}% of RAM is available, but at least 50% is required"
            echo "${_appName} requires at least 50% of the RAM to be free" ; exit 1
        }

        # If more then 1 zram device then override swap priority
        test "${_swapDevices}" -lt "1" || _swapPriority=$(( 100 / _swapDevices ))

        _count="0"

        # Create the zram devices
        while test "${_count}" -lt "${_swapDevices}" ; do
            _device="$(zramctl --size "${_swapSize}G" --algorithm "${_swapAlgorithm}" --find || {
                sysLog "Failed to create zram device!"
                echo "Failed to create zram device" ; exit 1
            })"

            mkswap -L SWAP "${_device}" || {
                sysLog "Failed to create swap on zram device: ${_device}"
                echo "Failed to create swap on zram device: ${_device}" ; exit 1
            }

            if test -n "${_swapPriority}" && swapon --priority "${_swapPriority}" "${_device}" ; then
                sysLog "Failed to enable swap on zram device: ${_device}"
                echo "Failed to enable swap on zram device: ${_device}" ; exit 1
            elif test -z "${_swapPriority}" && swapon "${_device}" ; then
                sysLog "Failed to enable swap on zram device: ${_device}"
                echo "Failed to enable swap on zram device: ${_device}" ; exit 1
            fi

            sysLog "Created zram device: ${_device} with size: ${_swapSize}G and algorithm: ${_swapAlgorithm}"

            _count=$(( _count + 1 ))
        done

}

function stopSwap () {

    while IFS= read -r _device ; do
        swapoff "${_device}" || {
            sysLog "Failed to disable swap on zram device: ${_device}"
            echo "Failed to disable swap on zram device: ${_device}" ; exit 1
        }
        zramctl --reset "${_device}" || {
            sysLog "Failed to reset zram device: ${_device}"
            echo "Failed to reset zram device: ${_device}" ; exit 1
        }
        sysLog "Disabled and reset zram device: ${_device}"
    done < <(zramctl -n | awk '{print $1}')

}

set -eo pipefail

# shellcheck disable=SC1091
source /etc/simple-zram.conf

_appName=simple-zram
_appVersion="$(cat /usr/share/docs/${_appName}/version 2>/dev/null || echo "unknown")"

_totalRAM="$(awk '/MemTotal:/ {print $2}' /proc/meminfo)"
_usedRAM="$(awk '/Active:/ {print $2}' /proc/meminfo)"

# Do some math to calculate if more then 50% of the RAM is used
_availableRAM="$(( 100 - (( _usedRAM * 100 ) / _totalRAM) ))"

# Default values for the script
_swapSize=${SWAP_SIZE:-"2"}
_swapAlgorithm=${SWAP_ALGORITHM:-"lzo"}
_swapDevices="${SWAP_DEVICES:-"1"}"
_swapPriority=${SWAP_PRIORITY:-"100"}

_copyRightInfo="$(cat <<EOF
Copyright (C) 2024 Michael Schaecher  <michaelleeschaecher@gmail.com> GNU v3 License
EOF
)"

_versionInfo="$(cat <<EOF
${_appName} - version: ${_appVersion}
${_copyRightInfo}
EOF
)"

_helpInfo="$(cat <<EOF
${_versionInfo}
This script creates and enables a zram swap device with the following parameters:

Usage: ${_appName} [start|stop|info|help]

Options:
  start                   Start the zram swap device with the configured parameters
  stop                    Stop the zram swap device and reset it
  info                    Show version and configuration information
  help                    Show this help message

${_copyRightInfo}
EOF
)"

_zramInfo="$(cat <<EOF
${_versionInfo}

ITEM                        VALUE
-----------------------------------------------------------

Total RAM:                  $(( _totalRAM / 1024000 )) GB
Used RAM:                   $(( _usedRAM / 1024000 )) GB
Available RAM:              ${_availableRAM}%

Devices Number:             ${_swapDevices}
ZRAM Devices:               $(zramctl -n | awk '{print $1}')

Swap Size:                  ${_swapSize} GB
Swap Usage:                 $(free -h | awk '/Swap:/ {print $3}')

Compression Algorithm:      ${_swapAlgorithm}

EOF
)"

case "${1}" in
    start                   ) verifyRoot ; startSwap          ;;
    stop                    ) verifyRoot ; stopSwap           ;;
    info                    ) echo "${_zramInfo}"    ; exit 0 ;;
    version                 ) echo "${_versionInfo}" ; exit 0 ;;
    help                    ) echo "${_helpInfo}"    ; exit 0 ;;
    *                       )
        echo "Invalid option: ${1}"
        echo "Use '${_appName} help' for usage information"
        exit 1
    ;;
esac

exit 0
