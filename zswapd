#!/bin/env bash

# Simple-ZRAM is a simple script to create and enable zram swap devices
# Copyright (C) 2024  Michael Schaecher <michaelleeschaecher@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Test if we are root
function root_check () {

    (( "$(id -u)" == 0 )) || { echo "This script must be run as root" ; exit 1 ; }

}

# shellcheck disable=SC2317
function sign_handler () {

    local _signal; _signal="${1:-SIGINT}"

    case "${_signal}" in
        SIGINT|SIGTERM|SIGQUIT  )
            event_log "info" "Received signal: ${_signal}. Stopping ${_appName} service ... "
        ;;
        *                       )
            event_log "warning" "Received unknown signal: ${_signal}"
        ;;
    esac

    exit 0

}

function event_log () {

    local _eventType="${1:-info}"
    local _eventMessage="${2:-No message provided}"

    case "${_eventType}" in
        info|warning|error|critical )
            logger -t "${_appName}" -p user.${_eventType} "${_eventMessage}"
        ;;
        *                           )
            logger -t "${_appName}" -p user.unknown "${_eventMessage}"
        ;;
    esac

}

function startSwap () {

    root_check

    local priority device

    # Does a zram device already exist?
    ! zramctl -n | grep -q '/dev/zram' || { event_log "info" "ZRAM device already exists." ; exit 0 ;}

    # Validate the compression algorithm is supported.
    case "${_swapAlgorithm}" in
        lzo|zstd|lz4    ) ;;
        *               )
            event_log "error" "Unsupported compression algorithm: ${_swapAlgorithm}"
            exit 1
        ;;
    esac

    # Make sure that the required amount of RAM is available (32Gb minimum and 50% free)
    (( _totalRAM > 33554432 )) || {
        event_log "error" "Insufficient RAM: ${_totalRAM} bytes available, 32GB required."; exit 1; }

    (( _availableRAM > 50 )) || {
        event_log "error" "Insufficient RAM: ${_availableRAM}% available, 50% required." ; exit 1; }

    # If more then 1 zram device then override swap priority
    test "${_swapDevices}" -lt "1" || priority=$(( _swapPriority / _swapDevices ))

    # Create the zram devices
    for ((i = 0; i < _swapDevices; i++)); do
        device=$(zramctl --size "${_swapSize}G" --algorithm "$_swapAlgorithm" --find) || {
            event_log "error" "Failed to create zram device." ; exit 1 ; }

        mkswap -L SWAP "$device" || { event_log "error" "Failed to mkswap on device: $device"; exit 1; }

        if ! swapon --priority "${priority}" "$device" 2>/dev/null; then
            if ! swapon "$device"; then
                event_log "error" "Failed to enable swap on device: $device"
                exit 1;
            fi
        fi

        event_log "info" "ZRAM device created: $device | Size: ${_swapSize}G | Algorithm: $_swapAlgorithm | Priority: ${priority}"

    done

}

function stopSwap () {

    root_check

    zramctl -n | awk '{print $1}' | while read -r device; do
        swapoff "$device" || { event_log "error" "Failed to disable swap on device: $device"; exit 1; }
        zramctl --reset "$device" || { event_log "error" "Failed to reset zram device: $device"; exit 1; }

        event_log "info" "ZRAM device reset: $device"
    done

}

function edit_conf () {

    echo "Opening configuration file for editing..."

    root_check

    # Open the configuration file in the default editor
    if test -n "${_editor}" ; then
        "${_editor}" /etc/ddnsd.conf || {
            echo "Failed to open configuration file in ${_editor}. Please check if the editor is installed."
            exit 1
        }
    else
        echo "No editor set. Please set the EDITOR environment variable to your preferred text editor."
        exit 1
    fi

}


set -euo pipefail

# shellcheck disable=SC1091
source /etc/zswapd.conf 2>/dev/null || { echo "Missing configuration file: /etc/zswapd.conf" ; exit 1 ; }

_appName="zswapd"
_appVersion="$(cat /usr/share/doc/${_appName}/version 2>/dev/null || echo "unknown")"

_totalRAM="$(awk '/MemTotal:/ {print $2}' /proc/meminfo)"
_usedRAM="$(awk '/Active:/ {print $2}' /proc/meminfo)"

# Do some math to calculate if more then 50% of the RAM is used
_availableRAM="$(( 100 - (( _usedRAM * 100 ) / _totalRAM) ))"

# Default values for the script
_swapSize=${SWAP_SIZE:-"2"}
_swapAlgorithm=${SWAP_ALGORITHM:-"lzo"}
_swapDevices="${SWAP_DEVICES:-"1"}"
_swapPriority=${SWAP_PRIORITY:-"100"}

_getRAM="$(free -h | grep -i 'mem')"
_getSwap="$(free -h | grep -i 'swap')"

_editor="${EDITOR:-"nano"}"

# Trap errors and log them
trap sign_handler SIGINT SIGTERM SIGQUIT

_copyRightInfo="$(cat <<EOF
Copyright (C) 2024 Michael Schaecher  <michaelleeschaecher@gmail.com> GNU v3 License
EOF
)"

_versionInfo="$(cat <<EOF
${_appName} - version: ${_appVersion}
${_copyRightInfo}
EOF
)"

_helpInfo="$(cat <<EOF
${_versionInfo}
This script creates and enables a zram swap device with the following parameters:

Usage: ${_appName} [OPTIONS]

Options:
    start                   Start the zram swap device with the configured parameters
    stop                    Stop the zram swap device and reset it
    status                  Show the current status of the zram swap device
    config                  Edit the configuration file for the zram swap device
    version                 Show the version information
    help                    Show this help message

${_copyRightInfo}
EOF
)"

_zramInfo="$(cat <<EOF
${_versionInfo}

ITEM                        VALUE
-----------------------------------------------------------

Total RAM:                  $(echo "${_getRAM}" | awk '{print $2}')
Used RAM:                   $(echo "${_getRAM}" | awk '{print $3}')
Available RAM:              ${_availableRAM}%

Devices Number:             ${_swapDevices}
ZRAM Devices:               $(zramctl -n | awk '{print $1}')

Swap Size:                  $(echo "${_getSwap}" | awk '{print $2}')
Swap Usage:                 $(echo "${_getSwap}" | awk '{print $3}')

Service:                    $(systemctl is-active --quiet "${_appName}.service" &&
                                echo "active" || echo "inactive")

Compression Algorithm:      ${_swapAlgorithm}

EOF
)"

case "${1}" in
    start                   ) startSwap                       ;;
    stop                    ) stopSwap                        ;;
    status                  ) echo "${_zramInfo}"    ; exit 0 ;;
    config                  ) edit_conf                       ;;
    version                 ) echo "${_versionInfo}" ; exit 0 ;;
    help                    ) echo "${_helpInfo}"    ; exit 0 ;;
    *                       )
        echo "Invalid option: ${1}"
        echo "Use '${_appName} help' for usage information"
        exit 1
    ;;
esac

exit 0
